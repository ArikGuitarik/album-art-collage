import numpy as np
from skimage.transform import resize
from grid import SquareGrid


class Image:
    """Image with RGB pixels of the shape (height, width, 3) with values in the range [0, 1]"""
    def __init__(self, pixels: np.ndarray):
        self._reject_invalid_params(pixels)
        self._pixels = pixels

    @staticmethod
    def _reject_invalid_params(pixels: np.ndarray):
        if len(pixels.shape) != 3 or pixels.shape[2] != 3:
            raise ValueError(f"Image should have shape (height, width, 3), but is {pixels.shape}.")
        min_pixel_value, max_pixel_value = np.min(pixels), np.max(pixels)
        if min_pixel_value < 0 or max_pixel_value > 1:
            raise ValueError(f"Pixel values should be in [0, 1], but are in [{min_pixel_value, max_pixel_value}]")

    def get_pixels(self, shape: tuple[int, int] = None) -> np.ndarray:
        """Get pixels of the image, resized to shape=(height, width) if shape is not None"""
        if shape is None:
            return self._pixels
        return resize(self._pixels, shape)


class ImageGridRenderer:
    """Combines the images in a SquareGrid into one image.

    The output
    - is generated by the render() method
    - is an Image object
    - contains the images aligned according to the grid and each resized to img_shape
    """

    def __init__(self, img_grid: SquareGrid[Image], img_shape: tuple[int, int]):
        self._img_grid = img_grid
        self._img_height, self._img_width = img_shape
        self._collage = None

    def _init_collage(self):
        grid_height, grid_width = self._img_grid.shape
        collage_height, collage_width = grid_height * self._img_height, grid_width * self._img_width
        self._collage = np.zeros((collage_height, collage_width, 3))

    def render(self) -> Image:
        self._init_collage()
        for row, col in self._img_grid.get_all_coordinates():
            self._place_image(row, col)
        return Image(self._collage)

    def _place_image(self, row, col):
        img_pixels = self._img_grid.get(row, col).get_pixels((self._img_height, self._img_width))
        self._collage[row * self._img_height:(row + 1) * self._img_height,
        col * self._img_width:(col + 1) * self._img_width] = img_pixels
